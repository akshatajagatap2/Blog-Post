"""
Django settings for blog_config project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from django.db import DEFAULT_DB_ALIAS
from utils.environment_configs import EnvironmentConfigs as Env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--02epq7$uib1p9u#ul67rg1#db$rz3_$orgab!lo9pbx6x&9l#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'blogpost_management',
    'user_management'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog_config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if Env.db == 'PostgreSQL':
    DATABASES = {
        DEFAULT_DB_ALIAS: {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': Env.dbName,
            'USER': Env.dbUser,
            'PASSWORD': Env.dbPassword,
            'HOST': Env.dbHost,
            'PORT': Env.dbPort,
            'CONN_MAX_AGE': None,
        },
        'celery_db': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'celery_db',
            'USER': Env.dbUser,
            'PASSWORD': Env.dbPassword,
            'HOST': Env.dbHost,
            'PORT': Env.dbPort,
            'CONN_MAX_AGE': None,
            "SCHEMA": "public"
        }
    }
elif Env.db == 'MySQL':
    DATABASES = {
        DEFAULT_DB_ALIAS: {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': Env.dbName,
            'USER': Env.dbUser,
            'PASSWORD': Env.dbPassword,
            'HOST': Env.dbHost,
            'PORT': Env.dbPort,
        }
    }
else:
    DATABASES = {
        DEFAULT_DB_ALIAS: {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}


SECRET_KEY_FOR_PASSWORD = "9M7MlzaXi0P1tX7uIl05QFzBztSjuRSJ"

"""Logging Settings"""
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(levelname)-8s %(name)-30s %(filename)-30s %(funcName)-30s %(lineno)-4d %(message)s',
        },
        'file': {
            'format': '%(asctime)s %(levelname)-8s %(filename)-30s %(funcName)-30s %(lineno)-4d %(message)s',
        },

    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'console'
        },
        'service_handler_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 20,
            'formatter': 'file',
            'filename': 'service.log'
        },
        'trace_handler_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 20,
            'formatter': 'file',
            'filename': 'trace.log'
        },
        'action_handler_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 20,
            'formatter': 'file',
            'filename': 'action.log'
        }

    },
    'loggers': {
        'service_logger': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'handlers': [
                'console',
                'service_handler_file'
            ]
        },
        'trace_logger': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'handlers': [
                'console',
                'trace_handler_file'
            ]
        },
        'action_logger': {
            'level': os.getenv('ACTION_LOG_LEVEL', 'INFO'),
            'handlers': [
                'console',
                'action_handler_file'
            ]
        }

    }
}

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'blogpost_management.api_exception.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}
